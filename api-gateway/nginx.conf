events {
    worker_connections 1024;
}

http {
    server_tokens off;
    client_max_body_size 20m;
    
    # Set MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Define upstream servers for each microservice
    upstream user_service {
        server user-service:5004;
    }
    
    upstream cart_service {
        server cart-service:5002;
    }
    
    upstream order_service {
        server order-service:5001;
    }
    
    upstream payment_service {
        server payment-service:5003;
    }
    
    upstream restaurant_service {
        server restaurant-service:5005;
    }
    
    # Security headers
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    
    # Main server configuration
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
        }
        
        # User Service Routes
        location /api/users {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://user_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Cart Service Routes
        location /api/cart {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://cart_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Order Service Routes
        location /api/orders {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://order_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Payment Service Routes
        location /api/payments {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://payment_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Restaurant Service Routes
        location /api/restaurants {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://restaurant_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Error handling
        error_page 404 /404.json;
        location = /404.json {
            add_header Content-Type application/json;
            return 404 '{"error":"Not Found","message":"The requested resource was not found"}';
        }
        
        error_page 500 502 503 504 /50x.json;
        location = /50x.json {
            add_header Content-Type application/json;
            return 500 '{"error":"Internal Server Error","message":"Something went wrong"}';
        }
    }
}